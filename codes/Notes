*Read the datasheet of the servo motor (hs 475 hb).
Ve careful about maximum achievable accuracy.
Depends on pot accuracy. Understand Dead bandwidth

* Calibrate servos. Check voltage dependancy 
Check servo.attach min max,
Check if servo library utilize linearization.

*When performing photo to vector, use 250x250 matrix.
After when performing cartesian to alphabetta,
Delete consecutive same elements.

*Use for loop and modulo operation for motor speed control.
Use millis instead of delay. 

*Kalemin icunu indirirken hizini belli bir noktadan sonra azalt.
Ya da kontrol et.

*Kalemin ucunu kaldirirken kalkarken alfa bettanin
Hareket edip yazmamasi icin, kalktiktan sonra delay koy

*Motors precision are increased now. Consider
Using write.milliseconds instead of delay. Still
Use it as dummy delay. Guarantee each iteration
In the loop is done in a constant time

*Use linearization. Probably map() function.
Consider the drawbacks.

*Use two bytes for each angle. 

*Consider transforming
Degree to milliseconds in rapsberry pi

*Consider using differential data format,
Requires new transmission protocol

*Consider using ssi or i2c instead of uart

*Think about using micros(). Read this
https://forum.arduino.cc/index.php?topic=506192.0

*For photo to vector algorithm, mind double lines.
In some cases single points could be left. Think about
Marker area in the code. Mark neighbor pixels as
Marked_neighbour state. Dont consider neighbours as visited
Becasue it can prevent the line to continue. 
(The pixels in neighbors is already counted as visited).
Explain to Azer. Algorithm optimization depends on inputs.
If small marked pixels area left, do not draw them

*Make the wooden base a little bigger than a4.
Consider that, the portrait
Does not necessarily need to be square.
With increased resolution, we can savrifice 
Some angle range, use bigger arms to reach 30x30cm
Rectangle and use only 20x30cm area of it, or
Find better (more utilization of angle range)
arm length ratio for 20x30cm rectangle
area??

*Realign betta robot so that betta angle can go even
Higher than 180, because in the other end, there is
natural stop limitation

*Check servos attached pins timer. Check its collisions
with micros() and serial communication, if needed
Use another pin
