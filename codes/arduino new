//hadi bakalim
#include <Servo.h>

 short int led = 0;
short int velocityCoeff=4; // Enter speed between 1 (fastest)-10(slowest) 
Servo myservo[3];  // create servo object to control a servo
short int c =  { 0 };    // variable to store the servo position
short int pos[2] =  { 0 };    // variable to store the servo position
short int finishFlag[2] = {2,2}; // flag to save last command execution status. 0 - busy, 1 - done, 2 - ready
unsigned long duration[2]; // variable to store delays between position
unsigned long curtime[2]= {0,0}; // variable to store last command execution time
unsigned int j=0;
const byte positions[10000][2] PROGMEM={104,53,105,54,105,54,105,54,106,54,106,55,107,55,107,55,108,56,108,56,108,56,109,57,109,57,110,57,110,57,110,58,111,58,111,58,112,58,112,59,112,59,113,59,113,59,114,60,114,60,114,60,115,60,115,61,116,61,116,61,116,61,117,62,117,62,118,62,118,62,118,62,119,63,119,63,120,63,120,63,120,63,121,64,121,64,121,64,122,64,122,64,123,64,123,65,123,65,124,65,124,65,124,65,125,65,125,66,126,66,126,66,126,66,127,66,127,66,127,66,128,67,128,67,128,67,129,67,129,67,130,67,130,67,130,67,131,67,131,68,131,68,132,68,132,68,132,68,133,68,133,68,133,68,134,68,134,68,134,68,135,69,135,69,135,69,136,69,136,69,132,68,132,69,132,69,133,70,133,71,133,71,133,72,134,72,134,73,134,74,135,74,135,75,135,75,135,76,136,76,136,77,136,77,137,78,137,79,137,79,137,80,138,80,138,81,138,81,139,82,139,82,139,83,139,83,140,84,140,84,140,85,140,85,141,86,141,86,141,87,141,88,142,88,142,89,142,89,143,90,143,90,143,91,143,91,144,92,144,92,144,93,144,93,145,94,145,94,145,95,145,95,146,96,146,96,146,97,146,97,147,98,147,98,147,98,147,99,148,99,148,100,148,100,148,101,148,101,149,102,149,102,149,103,149,103,150,104,150,104,150,105,150,105,151,106,151,106,151,107,151,107,151,107,152,108,152,108,152,109,152,109,153,110,153,110,153,111,153,111,164,113,164,113,163,113,163,113,162,113,162,113,161,112,160,112,160,112,159,112,159,112,158,112,157,112,157,112,156,112,156,112,155,111,154,111,154,111,153,111,153,111,152,111,151,111,151,111,150,110,150,110,149,110,148,110,148,110,147,110,147,109,146,109,145,109,145,109,144,109,144,109,143,108,142,108,142,108,141,108,141,108,140,107,139,107,139,107,138,107,138,106,137,106,137,106,136,106,135,105,135,105,134,105,134,105,133,105,133,104,132,104,131,104,131,103,130,103,130,103,129,103,129,102,128,102,127,102,127,102,126,101,126,101,125,101,125,100,124,100,124,100,123,100,122,99,122,99,121,99,121,98,120,98,120,98,119,97,119,97,118,97,118,96,117,96,117,96,116,95,113,93,113,93,113,93,113,92,113,92,113,91,113,91,113,91,113,90,113,90,113,89,113,89,113,89,113,88,113,88,113,87,113,87,113,87,113,86,113,86,113,85,113,85,113,85,113,84,113,84,113,83,113,83,113,82,113,82,113,82,112,81,112,81,112,80,112,80,112,79,112,79,112,78,112,78,112,78,112,77,112,77,111,76,111,76,111,75,111,75,111,74,111,74,111,73,111,73,110,72,110,72,110,71,110,71,110,70,110,70,110,69,110,69,109,68,109,68,109,67,109,67,109,66,109,66,108,65,108,65,108,64,108,64,108,63,108,62,107,62,107,61,107,61,107,60,107,60,106,59,106,59,106,58,106,57,106,57,105,56,105,56,105,55,105,54,104,54,104,53};


void setup() {
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);  
  
  myservo[0].attach(2);  // attaches the servo on pin 2 to the servo object (alpha)
  myservo[1].attach(4);   // attaches the servo on pin 4 to the servo object (beta)
  myservo[2].attach(8);   // attaches the servo on pin 8 to the servo object (z)
  //myservo[0].write(pos[0]);
  //myservo[1].write(pos[1]);
  pos[0]=positions[0][0];
  myservo[0].write(pos[0]);
  pos[1]=positions[0][1];
  myservo[1].write(pos[1]);
//  delay(5000);
//  myservo[0].write(pos1);
  //myservo[1].write(145);
}
 
 
void writemotor (short int motor, short int angle) {
  if (finishFlag[motor]==2) {
    
    if (angle != pos[motor]) {   
        duration[motor]=velocityCoeff*(1000*max(abs(positions[j][0]-pos[0]),abs(positions[j][1]-pos[1])))/(abs(angle-pos[motor]));
        finishFlag[motor] = 0;
    }
    else 
      finishFlag[motor]= 1;    
      
  }
  
  if (finishFlag[motor]==0){
      
      if (micros() < curtime[motor])                              //  prevent micros overflow
        curtime[motor] = 4294967295 - curtime[motor];
  
  
      if(((micros()-curtime[motor])>duration[motor])){

     
            if (pos[motor]<angle){
                pos[motor]+=1;
                myservo[motor].write(pos[motor]);
                curtime[motor]=micros();
            }
    
            else if (pos[motor]>angle){      
                pos[motor]-=1;
                myservo[motor].write(pos[motor]);
                curtime[motor]=micros();       
            }

            else 
                finishFlag[motor]= 1;    
          
      }
  }
}

void liftPen() {                //lifting the pen with 3rd motor
   myservo[2].write(150);
   delay(100);
}

void lowerPen() {               //lowering the pen with 3rd motor
   myservo[2].write(0);
   delay(100);
}

void loop() {
//writemotor(0,136);
//writemotor(1,69);

    if(positions[j][0]> 250) {
      if(positions[j][0]==251){               //lift code is 251, alpha and beta should be 251 
        liftPen();
        j++;
      }
      else if(positions[j][0]==252){          //lower code is 252, alpha and beta should be 252 
        lowerPen();
        j++;
      }
      else if(positions[j][0]==253){          //end code is 253, alpha and beta should be 253
        liftPen();
        while(1){};
      }
    }
writemotor(0,positions[j][0]);
writemotor(1,positions[j][1]);



  if (finishFlag[0] && finishFlag[1]) {
    j++;
    finishFlag[0] = 2;
    finishFlag[1] = 2;
    
    }
}
